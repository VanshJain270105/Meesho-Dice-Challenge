# viton_pipeline.py
import os
import shutil
import subprocess
import glob
import time
import sys
import re
from pathlib import Path
from cloth_mask import generate_mask_auto

# -------- CONFIG ----------
BASE_DIR = Path(__file__).resolve().parent
VITON_DIR = Path(os.environ.get("VITON_DIR", str(BASE_DIR)))
# --------------------------

DATASET_ROOT = VITON_DIR / "datasets"
TEST_DIR = DATASET_ROOT / "test"
CLOTH_DIR = TEST_DIR / "cloth"
MASK_DIR = TEST_DIR / "cloth-mask"
IMAGE_DIR = TEST_DIR / "image"          # preprocessed person images here
RESULTS_DIR = VITON_DIR / "results" / "viton_hd"
UPLOADS_DIR = VITON_DIR / "uploads"
LOCKFILE = VITON_DIR / ".viton_lock"

# allowed extensions
ALLOWED_EXT = {".jpg", ".jpeg", ".png"}


def _secure_filename(name: str) -> str:
    name = Path(name).name
    name = name.replace(" ", "_")
    name = re.sub(r"[^A-Za-z0-9_.-]", "", name)
    if name == "":
        raise ValueError("Invalid filename after sanitization")
    return name


def ensure_dirs():
    for p in (CLOTH_DIR, MASK_DIR, IMAGE_DIR, UPLOADS_DIR,
              TEST_DIR / "image-parse",
              TEST_DIR / "openpose-json",
              TEST_DIR / "openpose-img",
              RESULTS_DIR):
        p.mkdir(parents=True, exist_ok=True)


def clear_previous_results():
    if RESULTS_DIR.exists():
        for f in RESULTS_DIR.glob("*"):
            try:
                f.unlink()
            except Exception:
                pass


def _acquire_lock(timeout=300):
    start = time.time()
    while True:
        try:
            fd = os.open(str(LOCKFILE), os.O_CREAT | os.O_EXCL | os.O_WRONLY)
            os.write(fd, str(os.getpid()).encode())
            os.close(fd)
            return
        except FileExistsError:
            if time.time() - start > timeout:
                raise TimeoutError("Timeout waiting for VITON lock")
            time.sleep(0.3)


def _release_lock():
    try:
        if LOCKFILE.exists():
            LOCKFILE.unlink()
    except Exception:
        pass


def install_cloth_from_upload(uploaded_path, filename=None):
    ensure_dirs()
    if filename is None:
        filename = _secure_filename(uploaded_path)
    else:
        filename = _secure_filename(filename)
    dest = CLOTH_DIR / filename
    shutil.copy(uploaded_path, dest)
    return filename


def generate_cloth_mask_for(filename):
    src = CLOTH_DIR / filename
    out = MASK_DIR / filename
    generate_mask_auto(str(src), str(out))
    return str(out)


def write_pair(person_filename, cloth_filename):
    """
    Writes test_pairs.txt for all persons in datasets/test/image/
    """
    ensure_dirs()
    pair_file = DATASET_ROOT / "test_pairs.txt"
    persons = sorted([p.name for p in IMAGE_DIR.iterdir() if p.suffix.lower() in ALLOWED_EXT])
    if not persons:
        raise FileNotFoundError(f"No preprocessed person images in {IMAGE_DIR}")
    with open(pair_file, "w") as f:
        for p in persons:
            f.write(f"{p} {cloth_filename}\n")
    return str(pair_file)


def run_viton_blocking():
    clear_previous_results()
    cmd = [
        sys.executable, "test.py",
        "--name", "viton_hd",
        "--dataset_dir", "./datasets",
        "--dataset_list", "test_pairs.txt",
        "--checkpoint_dir", "./checkpoints",
        "--save_dir", "./results"
    ]
    subprocess.run(cmd, cwd=str(VITON_DIR), check=True)


def find_all_results(timeout_s=120):
    """
    Wait until results appear, then return all result image paths.
    """
    res_dir = RESULTS_DIR
    deadline = time.time() + timeout_s
    while time.time() < deadline:
        files = sorted(res_dir.glob("*"), key=lambda p: p.stat().st_mtime)
        images = [str(f) for f in files if f.suffix.lower() in ALLOWED_EXT]
        if images:
            return images
        time.sleep(0.5)
    return []


def process_cloth_and_run(uploaded_filepath, person_filename="person.jpg"):
    """
    uploaded_filepath: path to uploaded cloth image (on disk)
    person_filename: kept for compatibility, ignored since we loop all persons.
    returns: list of generated image paths
    """
    ensure_dirs()
    _acquire_lock(timeout=300)
    try:
        cloth_basename = install_cloth_from_upload(uploaded_filepath)
        generate_cloth_mask_for(cloth_basename)
        write_pair(person_filename, cloth_basename)  # generates pairs for all persons
        run_viton_blocking()
        results = find_all_results(timeout_s=120)
        if not results:
            raise FileNotFoundError("No result images generated by VITON-HD (check logs).")
        return results
    finally:
        _release_lock()
